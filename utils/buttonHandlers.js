const { accessKeyboard, infoKeyboard, menuKeyboard } = require('./keyboards');
const { channel } = require('./const');
const { InlineKeyboard } = require('grammy');

const buttonMenuHandler = async (ctx) => {
    await ctx.callbackQuery.message.editText('–¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ:', {
        reply_markup: menuKeyboard,
        parse_mode: 'MarkdownV2'
    });
    await ctx.answerCallbackQuery();
};

const buttonAccessHandler = async (ctx) => {
    await ctx.callbackQuery.message.editText('–î–æ—Å—Ç—É–ø –≤ —á–∞—Ç –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –ª—é–±–æ–π –ø–æ–¥–ø–∏—Å—á–∏–∫ –Ω–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞:', {
        reply_markup: accessKeyboard
    });
    await ctx.answerCallbackQuery();
};

const buttonInfoHandler = async (ctx) => {
    await ctx.callbackQuery.message.editText('*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ*\n' +
        '\n' +
        'ü§ñ CryptoBot \\- –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–ª—è –∏–Ω–≤–∞–π—Ç–æ–≤ –∏ –¥–æ—Å—Ç—É–ø–∞ –≤ –∑–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç\n' +
        '\n' +
        '‚ùó –û—Ç–∫–∞–∑ –æ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏: –ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —É—Å–ª—É–≥–∏ –¥–æ—Å—Ç—É–ø–∞ –≤ —á–∞—Ç\\. –ú—ã –Ω–µ –Ω–µ—Å–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–µ\\. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –∏ –Ω–æ—Ä–º—ã –ø–æ–≤–µ–¥–µ–Ω–∏—è\\.\n' +
        '\n' +
        `üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é –≥—Ä—É–ø–ø—É: [–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã](${channel.link})\n` +
        '\n' +
        'üîí –ó–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç: –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é –≥—Ä—É–ø–ø—É –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ –∑–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç\\.\n' +
        '\n' +
        'üìß –ö–æ–Ω—Ç–∞–∫—Ç—ã: –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å: Email: example@example\\.com –¢–µ–ª–µ—Ñ–æ–Ω: \\+1234567890'
        , {
            reply_markup: infoKeyboard,
            parse_mode: 'MarkdownV2',
            disable_web_page_preview: true
        });
    await ctx.answerCallbackQuery();
};

const buttonCheckSubscriptionHandler = async (ctx) => {
    const userId = ctx.from.id;
    const chatMember = await ctx.api.getChatMember(channel.name, userId);
    if (chatMember.status === 'left') {
        await ctx.api.editMessageText(ctx.chat.id, ctx.update.callback_query.message.message_id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –∫–∞–Ω–∞–ª—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.', {
            reply_markup: accessKeyboard,
        });
    } else {
        await ctx.api.editMessageText(ctx.chat.id, ctx.update.callback_query.message.message_id, '–ü–æ–ª—É—á–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç!', {
            reply_markup: new InlineKeyboard().text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'button-menu'),
        });
    }

    await ctx.answerCallbackQuery();
};

module.exports = {
    buttonMenuHandler,
    buttonCheckSubscriptionHandler,
    buttonAccessHandler,
    buttonInfoHandler
};