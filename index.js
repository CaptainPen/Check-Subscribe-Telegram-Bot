require('dotenv').config();
const {
    Bot,
    GrammyError,
    HttpError,
    InlineKeyboard
} = require('grammy');
const { hydrate } = require('@grammyjs/hydrate');

const bot = new Bot(process.env.BOT_API_KEY);
bot.use(hydrate());

bot.api.setMyCommands([{
    command: 'start', description: '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞',
}]);

const menuInlineKeyboard = new InlineKeyboard()
    .url('üîó –ò–Ω–≤–∞–π—Ç Blum', 't.me/BlumCryptoBot/app?startapp=ref_IofPLNpBXe').row()
    .text('üîë –î–æ—Å—Ç—É–ø –≤ —á–∞—Ç', 'button-access').row()
    .text('üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ', 'button-info').row();

const accessInlineKeyboard = new InlineKeyboard()
    .url('üíé –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª Blum', 'https://t.me/blumcrypto').row()
    .text('üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'button-aaa').row()
    .text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'button-menu').row();

const infoInlineKeyboard = new InlineKeyboard().text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'button-menu');

bot.command('start', async (ctx) => {
    await ctx.reply('üëã \n –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é\\! –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—à—å—Å—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π –∏ —Ö–æ—á–µ—à—å –±—ã—Ç—å —á–∞—Å—Ç—å—é –Ω–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞? –¢–æ–≥–¥–∞ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ, –≤—ã–±–µ—Ä–∏ —Å–∞–º —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç\\.', {
        parse_mode: 'MarkdownV2',
    });
    await ctx.reply('–¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ:', {
        reply_markup: menuInlineKeyboard
    });
    await ctx.answerCallbackQuery();
});

bot.on('message', async (ctx) => {
    await ctx.reply('–ù–∞–¥–æ –ø–æ–¥—É–º–∞—Ç—å...');
});

bot.callbackQuery('button-access', async (ctx) => {
    await ctx.callbackQuery.message.editText('–î–æ—Å—Ç—É–ø –≤ —á–∞—Ç –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –ª—é–±–æ–π –ø–æ–¥–ø–∏—Å—á–∏–∫ –Ω–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞:', {
        reply_markup: accessInlineKeyboard
    });
    await ctx.answerCallbackQuery();
});

bot.callbackQuery('button-info', async (ctx) => {
    await ctx.callbackQuery.message.editText('–ì–ª–∞–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –±–æ—Ç–∞ - –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç–∞–º –∏ –∫–∞–Ω–∞–ª–∞–º. –û–Ω –Ω–µ –∏–º–µ–µ—Ç —Ü–µ–ª–∏ –æ—Å–∫–æ—Ä–±–∏—Ç—å –∫–æ–≥–æ-–ª–∏–±–æ –∏ –Ω–µ—Å–µ—Ç —Ç–æ–ª—å–∫–æ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä, –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤–∑—è—Ç—ã –∏–∑ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ñ–æ—Ä–º–∞—Ö. –ê–≤—Ç–æ—Ä –Ω–µ –Ω–µ—Å–µ—Ç –Ω–∏–∫–∞–∫–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –ø–µ—Ä–µ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª. –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–∞—Ç.', {
        reply_markup: infoInlineKeyboard
    });
    await ctx.answerCallbackQuery();
});

bot.callbackQuery('button-menu', async (ctx) => {
    await ctx.callbackQuery.message.editText('–¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ:', {
        reply_markup: menuInlineKeyboard,
        parse_mode: 'MarkdownV2'
    });
    await ctx.answerCallbackQuery();
});

bot.catch((err) => {
    const ctx = err.ctx;
    console.log(`Error while handling update ${ctx.update.update_id}:`);
    const e = err.error;

    if (e instanceof GrammyError) {
        console.error('Error in request:', e.description);
    } else if (e instanceof HttpError) {
        console.error('Could not contact  Telegram', e);
    } else {
        console.log('Unknown error', e);
    }
});

bot.start();

console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');